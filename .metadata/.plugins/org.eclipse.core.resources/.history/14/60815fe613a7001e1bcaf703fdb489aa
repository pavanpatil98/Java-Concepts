package Generics;

class IntegerPrinter{
	Integer val;
	public IntegerPrinter(Integer val) {
		this.val = val;
	}
	public  void print() {
		System.out.println("Value is "+this.val);
	} 
}
class DoublePrinter{
	Double val;
	public DoublePrinter(Double val) {
		this.val = val;
	}
	public  void print() {
		System.out.println("Value is "+this.val);
	} 
}
class StringPrinter{
	String val;
	public StringPrinter(String val) {
		this.val = val;
	}
	public  void print() {
		System.out.println("Value is "+this.val);
	} 
}
//===================Generics========================
class Printer<T>{
	T val;
	public Printer(T val) {
		this.val = val;
	}
	public  void print() {
		System.out.println("Value is "+this.val);
	} 
}
//===================Generics Advancement========================
class Animal{
	String name;
	public void setName(String name) {this.name = name;}
	public String getName(){return this.name;}
}
class Cat extends Animal{
	String distance;
	public void setDistance(String distance) {this.distance = distance;}
	public String getDistance(){return this.distance;}
}
class Dog extends Animal{
	String distance;
	public void setDistance(String distance) {this.distance = distance;}
	public String getDistance(){return this.distance;}
}
class AnimalPrinter<T >{
	T val;
	public AnimalPrinter(T val) {
		this.val = val;
	}
	public  void print() {
		System.out.println("Value is "+this.val);
	} 
}
public class Main {

	public static void main(String[] args) {
		//Issue we have to create separate types to handle printing based on datatype
		IntegerPrinter ip = new IntegerPrinter(10);
		ip.print();
		DoublePrinter dp = new DoublePrinter(10.00);
		dp.print();
		StringPrinter sp = new StringPrinter("Pavan");
		sp.print();
		
		//solution use generics 
		Printer<Integer> pi = new Printer<>(10);
		pi.print();
		Printer<Double> pd = new Printer<>(10.00);
		pd.print();
		Printer<String> ps = new Printer<>("Pavan");
		ps.print();
		//same can be achieve with taking object type but type safety issue is big blocker
		
		
		//
		
		

	}

}
